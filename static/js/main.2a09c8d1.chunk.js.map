{"version":3,"sources":["components/tile/Tile.js","components/grid/Grid.js","App.js","reportWebVitals.js","index.js"],"names":["Tile","classes","this","props","value","highlight","trim","className","getClasses","onClick","onClicked","React","Component","Grid","state","size","tiles","Array","fill","turn","round","scoring","players","alias","icon","console","log","handleTileClick","bind","renderTile","getStatus","moveStack","length","gameover","setState","slice","pop","i","x","y","Math","floor","lastMove","playerLastMove","indexToCoordinate","linked","diag","revDiag","xi","coordinateToIndex","yi","di","rdi","push","obj","JSON","stringify","index","getCurrentPlayer","checkScore","map","_","rowIndex","indexTransformed","includes","status","id","renderRows","disabled","handleActionButton","actionButtonText","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2a09c8d1.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Tile.css\";\r\n\r\nclass Tile extends React.Component {\r\n  getClasses() {\r\n    let classes = \"tile \";\r\n    if (this.props.value === null) {\r\n      classes += \"empty \";\r\n    }\r\n    if (this.props.highlight) {\r\n      classes += \"highlight \";\r\n    }\r\n    return classes.trim();\r\n  }\r\n  render() {\r\n    return (\r\n      <div className={this.getClasses()} onClick={this.props.onClicked}>\r\n        {this.props.value}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Tile;\r\n","import \"./Grid.css\";\r\nimport Tile from \"../tile/Tile.js\";\r\nimport React from \"react\";\r\n\r\nclass Grid extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      size: props.size,\r\n      tiles: new Array(props.size * props.size).fill(null),\r\n      turn: 0,\r\n      round: 0,\r\n      scoring: [],\r\n      players: [\r\n        {\r\n          alias: \"Player 1\",\r\n          icon: \"X\",\r\n        },\r\n        {\r\n          alias: \"Player 2\",\r\n          icon: \"O\",\r\n        },\r\n      ],\r\n    };\r\n    console.log(\r\n      `new Grid(${this.state.size}, ${this.state.size}) connect ${this.state.size} to win`\r\n    );\r\n\r\n    this.handleTileClick = this.handleTileClick.bind(this);\r\n    this.renderTile = this.renderTile.bind(this);\r\n    this.getStatus = this.getStatus.bind(this);\r\n    this.moveStack = [];\r\n  }\r\n  getCurrentPlayer() {\r\n    return this.state.players[this.state.turn % this.state.players.length];\r\n  }\r\n  handleActionButton() {\r\n    if (this.state.gameover || this.moveStack.length <= 0) {\r\n      this.moveStack = [];\r\n      this.setState({\r\n        scoring: [],\r\n        gameover: false,\r\n        turn: 0,\r\n        round: this.state.round + 1,\r\n        tiles: new Array(this.state.size * this.state.size).fill(null),\r\n      });\r\n      return;\r\n    }\r\n    let tiles = this.state.tiles.slice();\r\n    tiles[this.moveStack.pop()] = null;\r\n    this.setState({\r\n      tiles: tiles,\r\n      turn: this.state.turn - 1,\r\n    });\r\n  }\r\n  indexToCoordinate(i) {\r\n    const x = i % this.state.size;\r\n    const y = Math.floor(i / this.state.size);\r\n    return { x, y };\r\n  }\r\n  coordinateToIndex(x, y) {\r\n    return x + this.state.size * y;\r\n  }\r\n  checkScore() {\r\n    const lastMove = this.moveStack[this.moveStack.length - 1];\r\n    const playerLastMove = this.state.tiles[lastMove];\r\n    const { x, y } = this.indexToCoordinate(lastMove);\r\n    console.log(`last move: ${lastMove} - ${x},${y}`);\r\n\r\n    if (playerLastMove === null) {\r\n      console.log(`player last move ${playerLastMove}`);\r\n      return [];\r\n    }\r\n\r\n    let linked = {\r\n      x: [],\r\n      y: [],\r\n      diag: [],\r\n      revDiag: [],\r\n    };\r\n    for (let i = 0; i < this.state.size; i++) {\r\n      const xi = this.coordinateToIndex(i, y);\r\n      const yi = this.coordinateToIndex(x, i);\r\n      const di = this.coordinateToIndex(i, i);\r\n      const rdi = this.coordinateToIndex(i, this.state.size - (i + 1));\r\n      if (this.state.tiles[xi] === playerLastMove) {\r\n        linked.x.push(xi);\r\n      } else if (linked.x.length < this.state.size) {\r\n        linked.x = [];\r\n      }\r\n      if (this.state.tiles[yi] === playerLastMove) {\r\n        linked.y.push(yi);\r\n      } else if (linked.y.length < this.state.size) {\r\n        linked.y = [];\r\n      }\r\n      if (this.state.tiles[di] === playerLastMove) {\r\n        linked.diag.push(di);\r\n      } else if (linked.diag.length < this.state.size) {\r\n        linked.diag = [];\r\n      }\r\n      if (this.state.tiles[rdi] === playerLastMove) {\r\n        linked.revDiag.push(rdi);\r\n      } else if (linked.revDiag.length < this.state.size) {\r\n        linked.revDiag = [];\r\n      }\r\n    }\r\n    for (let obj in linked) {\r\n      console.log(`checking ${JSON.stringify(obj)}`);\r\n      if (linked[obj].length >= this.state.size) {\r\n        return linked[obj];\r\n      }\r\n    }\r\n    if (this.moveStack.length === this.state.tiles.length) {\r\n      this.setState({ gameover: true });\r\n      return [];\r\n    }\r\n    return [];\r\n  }\r\n  handleTileClick(index) {\r\n    if (this.state.tiles[index] !== null || this.state.gameover) {\r\n      return;\r\n    }\r\n    let tiles = this.state.tiles.slice();\r\n    tiles[index] = this.getCurrentPlayer().icon;\r\n    this.moveStack.push(index);\r\n    this.setState({ tiles: tiles, turn: this.state.turn + 1 }, () => {\r\n      let scoring = this.checkScore();\r\n      console.log(`scoring: ${scoring}`);\r\n      if (scoring.length > 0) {\r\n        this.setState({\r\n          gameover: true,\r\n          turn: this.state.turn - 1,\r\n          scoring: scoring,\r\n        });\r\n      }\r\n    });\r\n  }\r\n  getStatus() {\r\n    if (this.state.gameover) {\r\n      if (this.moveStack.length === this.state.tiles.length) {\r\n        return \"Draw\";\r\n      }\r\n      return `${this.getCurrentPlayer().icon} Wins!`;\r\n    }\r\n    return `${this.getCurrentPlayer().icon}'s turn`;\r\n  }\r\n  actionButtonText() {\r\n    if (this.state.gameover) {\r\n      return \"Play again?\";\r\n    }\r\n    return \"Undo\";\r\n  }\r\n  renderRows() {\r\n    return new Array(this.state.size).fill(this.turn).map((_, rowIndex) => {\r\n      return (\r\n        <div className={\"row\"} key={`row_${rowIndex}`}>\r\n          {this.state.tiles\r\n            .slice(\r\n              this.state.size * rowIndex,\r\n              this.state.size * rowIndex + this.state.size\r\n            )\r\n            .map((value, index) => {\r\n              const indexTransformed = this.state.size * rowIndex + index;\r\n              return this.renderTile(\r\n                indexTransformed,\r\n                this.state.scoring.includes(indexTransformed)\r\n              );\r\n            })}\r\n        </div>\r\n      );\r\n    });\r\n  }\r\n  renderTile(index, highlight) {\r\n    return (\r\n      <Tile\r\n        highlight={highlight}\r\n        value={this.state.tiles[index]}\r\n        onClicked={this.handleTileClick.bind(this, index)}\r\n        key={`tile_${index}`}\r\n      ></Tile>\r\n    );\r\n  }\r\n  render() {\r\n    const status = this.getStatus();\r\n\r\n    return (\r\n      <section>\r\n        <article id=\"status\">{status}</article>\r\n        <div id=\"grid\">{this.renderRows()}</div>\r\n        <button\r\n          disabled={this.moveStack.length < 1}\r\n          id=\"action-btn\"\r\n          onClick={this.handleActionButton.bind(this)}\r\n        >\r\n          {this.actionButtonText()}\r\n        </button>\r\n      </section>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Grid;\r\n","import \"./App.css\";\nimport Grid from \"./components/grid/Grid.js\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">Tic-Tac-Toe</header>\n      <Grid size={3} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}